#include <iostream>
#include <cstdlib>
//To allow us to use srand() and rand() function to generate random numbers
#include <ctime>
//To allow us to use time() function to generate random numbers
#include <fstream>
#include <string>
#include <array>
//Because we are using many functions, we need to pass the arrays by value through each function. The classic array[] can't be pass as a value but will be passed as a constant pointer (memory address). Thus, to make our code easier, we will be using std::array from C++ Standard Library

using namespace std;

void title();
//The title of the game "Hangman"
void start();
//The word "Start" before the game starts
void wordGenerator(string& word, string& hint1, string& hint2, string& hint3, string& hint4, string& hint5);
//Generate random words from wordbank.txt + the hints of the word generated
void randomHint(string& hint1, string& hint2, string& hint3, string& hint4, string& hint5, int& p);
//Randomize the hints of the generated words
void hangmanFigure(int& life);
//Generate the hangman figure which indicate the lifepoints of the player
void mainAlgorithm(string word, string& hint1, string& hint2, string& hint3, string& hint4, string& hint5, int& p);
//The main algorithm of the game
void checker(char uncheckedAnswer, string getWord, int length, array<char,10>& blankspaces, int& e);
//Perform checks for the answers entered by the player
void enter(char& answer);
//For the player to enter their answers
void showBlankspaces(array<char,10>& blankspaces, int length);
//Algorithm to generate the blankspaces for the entered answers
void deductLife(int& life);
//Algorithm for the player to loss lifepoint when they entered the wrong answers
void win();
//Winning the game, will ask the player whether they want to replay the game
void lose(string& getWord);
//Losing the game, will ask the player whether they want to replay the game
void end();
//Game over




int main() {

	string replay;   //For player to enter their choice of starting the game/replaying the game
	string word;  //Global variable to be used by many functions later
	string hint1, hint2, hint3, hint4, hint5; //Global variable for hints
	int p; //Integer to randomise the hint

	title(); //Show the title of the game

	cout << "Please make sure you have CAPS LOCK on, the game only accept CAPITAL LETTERS. Thank You!" << endl;
	cout << endl << endl; //Capital letter only for simplier programme
	cout << "Type \"YES\" to start the game" << endl; //Player choose to start the game
	cin >> replay; //Input the choice of the player

	while (replay == "yes") {
		cout << "CAPITAL LETTER, please... You can try again." << endl; //Some jokes
		cin >> replay;
	}

	//Main part running after the player started the game
	while (replay == "YES") {
		cout << endl << endl << endl << endl;

		start(); //Indicate that the game has started

		cout << endl << endl;
		cout << "Game was made by Koh Jun Xian, Yee Shu Yong, Hng Chong Khen, Tham Wen Qing" << endl;
		cout << "Thanks for playing!" << endl;
		//Credits to the gamemaker
		cout << endl << endl << endl << endl;

		replay = { 0 };
		//Reset the player choice so the player can enter their choice to replay the game later
		wordGenerator(word, hint1, hint2, hint3, hint4, hint5);
		//Takes in these 6 variables to generate random words for the game
		mainAlgorithm(word, hint1, hint2, hint3, hint4, hint5, p);
		//The main algorithm running for the game
		cout << endl << endl << endl;
		cout << "Do you want to play again? YES/NO" << endl;
		//Choice to replay the game after the game ended
		cin >> replay;
	}

	end();
	//Game over

	return 0;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-Functions-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

void wordGenerator(string& word, string& hint1, string& hint2, string& hint3, string& hint4, string& hint5) {
	string generatedWord;
	int i;  //Random number generator
	int j; //Input the serial number of the word in the wordbank.txt

	srand(time(NULL));    //Use the computer internal time to generate seed. Since the time keeps changing the seed will also change
	i = rand() % 50 + 1; //Use the seed generated by srand() to generate pseudo-random interger value. Without changing the seed value the generate value will be the same. (Not random)

	//cout << "i = " << i << endl; (FOR DEBUG)

	ifstream input;

	input.open("wordbank1.txt");
	//Access the file wordbank.txt

	while (!input.eof()) {

		input >> j >> generatedWord;      //Input the serial number of the word and the word
		getline(input, hint1, '.');      //Input the first hint
		getline(input, hint2, '.');     //Input the second hint
		getline(input, hint3, '.');    //Input the third hint
		getline(input, hint4, '.');   //Input the fourth hint
		getline(input, hint5, '.');  //Input the last hint


		if (j == i) {
			//cout << "generatedword: " << generatedWord << endl; (FOR DEBUG)

			break;
			//To stop the input of the next word (Generate only 1 word from the wordbank)
		}

	}

	word = generatedWord; //Word is the global variable and it used to hold the generated random word to be used later in those other function
	input.close();
	//Close the file after using it
}


void randomHint(string& hint1, string& hint2, string& hint3, string& hint4, string& hint5, int& p) {

	srand(time(NULL));
	p = rand()%5 + 1;
	//Generate random number to randomise the hint output to help the player throughtout the game. The hint is shown at the first round of the game and after the player had entered the wrong answers.

	if (p == 1) {
		cout << "Someone:\""<< hint1 << " \"" << endl;
	}
	else if (p == 2) {
		cout << "Someone:\"" << hint2 << " \"" << endl;
	}
	else if (p == 3) {
		cout << "Someone:\"" << hint3 << " \"" << endl;
	}
	else if (p == 4) {
		cout << "Someone:\"" << hint4 << " \"" << endl;
	}
	else {
		cout << "Someone:\"" << hint5 << " \"" << endl;
	}

}


void checker(char uncheckedAnswer, string getWord, int length, array<char, 10>& blankspaces, int& e) {

	int b; // Used for loop to check arrays
	int	c; //Used to check if the player loss a lifepoint
	array<char, 10> temp = { 0 };   //Used to check if the answer entered by the player are correct.

	//showBlankspaces(blankspaces, length); (FOR DEBUG)

	temp = blankspaces; //Blankspace is generated from the function mainAlgorithm. Basically its just "_ _ _ _"

	//temp is used to check if the blankspaces changed after the player input his/her answer, only the right answer will change the blackspace. If the answer is wrong the blackspace stays the same. Thus we can use this to indicate if the player loss lifepoint or not.

	//The algorithm below is to fill the blankspace with the correct answer and ignore the wrong one while making the player to loss his/her lifepoint

	for (b = 0; b < length; b++) {
		if (uncheckedAnswer == getWord[b]) {
			c = b;
			blankspaces[c] = uncheckedAnswer;
		}
	}

	//e is used to check if the plater got the wrong answer, if wrong answer is entered, the value of e changes indicate that the player has loss a lifepoint

	if (temp == blankspaces) {
		e++;
	}

	cout << endl << endl;
}


void enter(char& answer) {

	//This function is used for the player to enter their answer and save the answer to be used by the other function as the game continues

	char enteredWord;

	cin >> enteredWord;

	answer = enteredWord;

	//answer is used to be processed by other function later

}


void showBlankspaces(array<char, 10>& blankspaces, int length) {
	//This function is used to show the players the condition or changes in the blackspaces. This also let the player know the alphabets placement on the blankspaces.

	int u; //Used to run loop for arrays

	for (u = 0; u < length; u++) {
		cout << blankspaces[u] << " ";
	}

}


void deductLife(int& life) {
	//This function used to deduct the lifepoint of the player, it is called after the user entered the wrong answers

	life = life - 1;
}


void win() {
	//Output the message when the player won the game

	cout << "Somebody: \"Wow, I impressed with your intelligence. Congratulation!\"" << endl;
}


void lose(string& getWord) {

	//Output the complete hangman figure (Indicate that the player has loss all of the lifepoint and loss the game)Also output a message and the correct answer for the player.

	cout << endl << endl << endl << endl << endl;

	cout << "     _____________" << endl;
	cout << "    |       |" << endl;
	cout << "    |       | " << endl;
	cout << "    |      (_)" << endl;
	cout << "    |       |__" << endl;
	cout << "    |      /|" << endl;
	cout << "    |       |" << endl;
	cout << "    |      / \\" << endl;
	cout << "    |          " << endl;
	cout << "____|____      " << endl;


	cout << endl << endl;
	cout << "You lose!" << endl;
	cout << endl << endl;
	cout << "Somebody: \" The answer is " << getWord << ". Try better next time!\"" << endl;
}


void hangmanFigure(int &life) {

	//Generate the hangman figure indicate the lifepoint remaining for the player

	if (life == 6) {
		cout << "     _____________" << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "____|____ " << endl;

	}
	if (life == 5) {
		cout << "     _____________" << endl;
		cout << "    |       |" << endl;
		cout << "    |       |" << endl;
		cout << "    |      (_)" << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "____|____ " << endl;

	}
	if (life == 4) {
		cout << "     _____________" << endl;
		cout << "    |       |" << endl;
		cout << "    |       | " << endl;
		cout << "    |      (_)" << endl;
		cout << "    |       |" << endl;
		cout << "    |       |" << endl;
		cout << "    |       |" << endl;
		cout << "    |     " << endl;
		cout << "    |     " << endl;
		cout << "____|____ " << endl;

	}
	if (life == 3) {

		cout << "     _____________" << endl;
		cout << "    |       |" << endl;
		cout << "    |       | " << endl;
		cout << "    |      (_)" << endl;
		cout << "    |       |__" << endl;
		cout << "    |       |" << endl;
		cout << "    |       |" << endl;
		cout << "    |      " << endl;
		cout << "    |      " << endl;
		cout << "____|____  " << endl;


	}

	if (life == 2) {
		cout << "     _____________" << endl;
		cout << "    |       |" << endl;
		cout << "    |       | " << endl;
		cout << "    |      (_)" << endl;
		cout << "    |       |__" << endl;
		cout << "    |      /|" << endl;
		cout << "    |       |" << endl;
		cout << "    |      " << endl;
		cout << "    |      " << endl;
		cout << "____|____  " << endl;

	}

	if (life == 1) {

		cout << "     _____________" << endl;
		cout << "    |       |" << endl;
		cout << "    |       | " << endl;
		cout << "    |      (_)" << endl;
		cout << "    |       |__" << endl;
		cout << "    |      /|" << endl;
		cout << "    |       |" << endl;
		cout << "    |      / " << endl;
		cout << "    |        " << endl;
		cout << "____|____    " << endl;


	}


}


void end() {

	//Mark the ending of the game.

	cout << "****************************************************************************" << endl;
	cout << "*  ______   ____            ______     ______            ______   _____    *" << endl;
	cout << "* |        |    | |\\    /| |          |      | |      | |        |     |  *" << endl;
	cout << "* |        |    | | \\  / | |          |      | |      | |        |_____|  *" << endl;
	cout << "* |   ____ |____| |  \\/  | |______    |      | |      | |______  |\\      *" << endl;
	cout << "* |      | |    | |       | |          |      | \\    /  |        | \\     *" << endl;
	cout << "* |_____ | |    | |       | |          |      |  \\  /   |        |  \\    *" << endl;
	cout << "*        | |    | |       | |______    |______|   \\/    |______  |   \\__ *" << endl;
	cout << "*                                                                          *" << endl;
	cout << "****************************************************************************" << endl;
}


void start() {

	//Mark the starting of the game

	cout << "|==========================================|" << endl;
	cout << "|  ______  _______  ____    _____  _______ |" << endl;
	cout << "| |           |    |    |  |     |    |    |" << endl;
	cout << "| |           |    |    |  |_____|    |    |" << endl;
	cout << "| |______     |    |____|  |\\         |    |" << endl;
	cout << "|        |    |    |    |  | \\        |    |" << endl;
	cout << "|        |    |    |    |  |  \\       |    |" << endl;
	cout << "|  ______|    |    |    |  |   \\__    |    |" << endl;
	cout << "|==========================================|" << endl;

}


void title() {

	//Show the title of the game
	cout << "############################################################" << endl;
	cout << "#         ____            ______            ____           #" << endl;
	cout << "# |    | |    | |\\     | |        |\\    /| |    | |\\     | #" << endl;
	cout << "# |    | |    | | \\    | |        | \\  / | |    | | \\    | #" << endl;
	cout << "# |____| |____| |  \\   | |   ____ |  \\/  | |____| |  \\   | #" << endl;
	cout << "# |    | |    | |   \\  | |      | |      | |    | |   \\  | #" << endl;
	cout << "# |    | |    | |    \\ | |_____ | |      | |    | |    \\ | #" << endl;
	cout << "# |    | |    | |     \\|        | |      | |    | |     \\| #" << endl;
	cout << "#                                                          #" << endl;
	cout << "############################################################" << endl;

	cout << endl << endl << endl << endl;
}


void mainAlgorithm(string getWord, string& hint1, string& hint2, string& hint3, string& hint4, string& hint5, int& p) {   //getWord is from wordGenerated

	int a; //Used in loop for the array
	int round = 1; //Check for the first round of the game
	int length = getWord.length();
	//Finds the length of the word generated and used to generate the number of blankspaces for the player

	array<char, 10> blankspaces = { 0 };
	//Empty array to generate blackspaces
	array<char, 10> wordGeneratedinArray = { 0 };
	//Used to copy and convert the word generated to array for comparison. If the blankspace has all the same alphabets as the wordGenerated, the player wins the game



	int life = 7;
	//Total lifepoint of the player
	int e = 0;
	//Used to check if the player has entered the wrong answer. The value will change when wrong answers is entered and changes the lifepoint of the player

	char answer;  //Enter by the user

	//Generate '_' as the blankspace to show the player number of the alphabets of the generated word
	for (a = 0; a < length; a++) {
		blankspaces[a] = '_';
	}

	//Convert string to arrays
	for (a = 0; a < length; a++) {
		wordGeneratedinArray[a] = getWord[a];
	}
	cout << endl << endl << endl << endl;

	//Main algorithm of the game
	while (1) {

		hangmanFigure(life); //SHows the hangman figure to the player throughout the game

		//Condition to win the game
		if (blankspaces == wordGeneratedinArray) {
			win();
			cout << getWord << endl;
			break;
		}


		//Condition to loss the game
		if (life == 0) {
			lose(getWord);
			break;
		}

		//cout << "life = " << life << endl; (FOR DEBUG)

		//Showing hint in the first round of the game
		if (round == 1) {
			//cout << "round" << endl;
			randomHint(hint1, hint2, hint3, hint4, hint5, p);
			round = 0;
		}

		cout << endl << endl << endl;
		//Show the condition/changes of blankspaces to the player thoughout the game
		showBlankspaces(blankspaces, length);

		cout << endl;
		//Player enter his/her answer
		cout << "Please enter a letter: ";
		//Inputting the answer entered
		enter(answer);
		//Runs the algorithm (function) to check if the answer is correct
		checker(answer, getWord, length, blankspaces, e);


		//Condition to loss a lifepoint and generate random hints to help the player
		if (e != 0) {
			deductLife(life);
			cout << endl << endl << endl << endl << endl << endl << endl << endl << endl << endl << endl << endl << endl << endl;
			randomHint(hint1, hint2, hint3, hint4, hint5, p);
			e = 0;

		}




	}

}
